##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","stargazer","lmtest","caret","pROC","ROCR","nnet",
"magick","cowplot","globals","equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","stargazer","lmtest","caret","pROC","ROCR","nnet",
"magick","cowplot","globals","equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
##############################################################################
#   REGRESSÃO LOGÍSTICA BINÁRIA COM VARIÁVEIS EXPLICATIVAS QUANTI E QUALIS   #
#                 EXEMPLO 03 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load("dados_fidelidade.RData")
load("dados_fidelidade.RData")
##############################################################################
#        EXEMPLO 03 - OBSERVAÇÃO DA BASE DE DADOS DADOS_FIDELIDADE           #
##############################################################################
#Visualizando a base de dados dados_fidelidade
dados_fidelidade %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 13)
#Estatísticas Univariadas da Base de Dados
summary(dados_fidelidade)
#Tabela de frequências absolutas das variáveis qualitativas referentes aos
#atributos da loja na percepção dos consumidores
table(dados_fidelidade$atendimento)
table(dados_fidelidade$sortimento)
table(dados_fidelidade$acessibilidade)
table(dados_fidelidade$preço)
glimpse(dados_fidelidade)
#Note que as variáveis qualitativas já estão como fator (fct)
##############################################################################
#             EXEMPLO 03 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO BINÁRIO          #
##############################################################################
modelo_fidelidade <- glm(formula = fidelidade ~ . - id,
data = dados_fidelidade,
family = "binomial")
#Parâmetros do modelo_fidelidade
summary(modelo_fidelidade)
#Outro modo de apresentar os outputs do modelo_fidelidade
summ(modelo_fidelidade, confint = T, digits = 3, ci.width = .95)
export_summs(modelo_fidelidade, scale = F, digits = 6)
#Procedimento Stepwise
step_fidelidade <- step(object = modelo_fidelidade,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
#Parâmetros do modelo step_fidelidade
summary(step_fidelidade)
#Note que sem a dummização, o R consegue calcular corretamente os parâmetros,
#mas o procedimento Stepwise, quando aplicado, não surte efeitos!
##############################################################################
#                    EXEMPLO 03 -  PROCEDIMENTO N-1 DUMMIES                  #
##############################################################################
#Dummizando as variáveis atendimento, sortimento, acessibilidade e preço. O
#código abaixo, automaticamente, fará: a) a dummização das variáveis originais;
#b)removerá as variáveis dummizadas originais; c) estabelecerá como categorias
#de referência as categorias de label 1 de cada variável original.
fidelidade_dummies <- dummy_columns(.data = dados_fidelidade,
select_columns = c("atendimento",
"sortimento",
"acessibilidade",
"preço"),
remove_selected_columns = T,
remove_first_dummy = T)
#Visualizando a base de dados fidelidade_dummies
fidelidade_dummies %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 16)
modelo_fidelidade_dummies <- glm(formula = fidelidade ~ . -id,
data = fidelidade_dummies,
family = "binomial")
#Parâmetros do modelo_fidelidade_dummies
summary(modelo_fidelidade_dummies)
#Valor do LL do modelo_fidelidade_dummies
logLik(modelo_fidelidade_dummies)
#Parâmetros do modelo_fidelidade_dummies
summary(modelo_fidelidade_dummies)
View(fidelidade_dummies)
#Parâmetros do modelo_fidelidade_dummies
summary(modelo_fidelidade_dummies)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","stargazer","lmtest","caret","pROC","ROCR","nnet",
"magick","cowplot","globals","equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
##############################################################################
#             REGRESSÃO LOGÍSTICA BINÁRIA E PROCEDIMENTO STEPWISE            #
#                 EXEMPLO 02 - CARREGAMENTO DA BASE DE DADOS                 #
##############################################################################
load("challenger.RData")
##############################################################################
#            EXEMPLO 02 - OBSERVAÇÃO DA BASE DE DADOS CHALLENGER             #
##############################################################################
#Visualizando a base de dados challenger
challenger %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#desgaste: quantidade de vezes em que ocorreu stress térmico
#temperatura: temperatura de lançamento (graus ºF)
#pressão: pressão de verificação de vazamento (psi-libra-força por polegada ao quadrado)
#t: teste para o lançamento (id)
#Estatísticas univariadas descritivas da base de dados
summary(challenger)
##############################################################################
#             EXEMPLO 02 - ESTIMAÇÃO DE UM MODELO LOGÍSTICO BINÁRIO          #
##############################################################################
#Não há uma variável binária para servir como uma variável dependente, certo?
#Então vamos criá-la considerando a ocorrência de desgastes de peças como a
#ocorrência de um evento que chamaremos de 'falha':
challenger %>%
mutate(falha = ifelse(desgaste > 0,
yes = "sim",
no = "não"),
falha = factor(falha)) -> challenger
#Vamos observar as alterações na base de dados original:
challenger %>%
select(desgaste, falha, everything()) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = F,
font_size = 22)
#Estimando o modelo logístico binário
modelo_challenger <- glm(formula = falha ~ . -desgaste -t,
data = challenger,
family = "binomial")
#Parâmetros do modelo_default
summary(modelo_challenger)
#Note que não há a explicitação da estatística geral do modelo,
#nem tampouco do valor de LL e dos intervalos de confiança.
#Uma solução rápida para o caso pode ser a utilização da função summ do pacote jtools
summ(model = modelo_challenger, confint = T, digits = 4, ci.width = 0.95)
export_summs(modelo_challenger, scale = F, digits = 4)
#Procedimento Stepwise
step_challenger <- step(object = modelo_challenger,
k = qchisq(p = 0.05, df = 1, lower.tail = FALSE))
View(challenger)
##################################################################################
#                  INSTALAÇÃO E CARREGAMENTO DE PACOTES NECESSÁRIOS             #
##################################################################################
#Pacotes utilizados
pacotes <- c("plotly","tidyverse","knitr","kableExtra","fastDummies","rgl","car",
"reshape2","jtools","stargazer","lmtest","caret","pROC","ROCR","nnet",
"magick","cowplot","globals","equatiomatic")
options(rgl.debug = TRUE)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
?glm
